package com.plat.acoal.controller;
import com.alibaba.fastjson.JSON;
import com.plat.acoal.bean.ResultData;
import com.plat.acoal.entity.Dev;
import com.plat.acoal.model.PressureFlowModel;
import com.plat.acoal.service.impl.DevServiceImpl;
import com.plat.acoal.service.impl.PressureFlowServiceImpl;
import com.plat.acoal.utils.DateUtil;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

@RestController
@Log4j2
@RequestMapping(value = "/pressflow", produces = "application/json;charset=UTF-8")
public class PressureFlowController {

        @Autowired
        public PressureFlowServiceImpl pressureFlowServiceImpl;
        @Autowired
        public DevServiceImpl devServiceImpl;
        /**
         * 查询最新水压和流量
         *
         * @param
         * @return
         */
        @GetMapping("/newPress")
    public String getNewPress(PressureFlowModel pressFlowModelModel, HttpServletRequest request) {
        String devid = "3";
        if (request.getParameter("devid") != null && !"".equals(request.getParameter("devid"))) {
            devid = request.getParameter("devid");
        }
        pressFlowModelModel.setDevid(Integer.parseInt(devid));

        List<PressureFlowModel> newPress = pressureFlowServiceImpl.selectNewPById(pressFlowModelModel);

        for (PressureFlowModel d : newPress
        ) {
            Date dt = d.getDcollectdt();
            d.setDcollectdt_re(DateUtil.dateToString(dt));
        }
        return JSON.toJSONString(newPress);
    }
    /**
     * 查询最新水压和流量
     *
     * @param
     * @return
     */
    @GetMapping("/newFlow")
    public String getNewFlow(PressureFlowModel pressFlowModelModel, HttpServletRequest request) {
        String devid = "3";
        if (request.getParameter("devid") != null && !"".equals(request.getParameter("devid"))) {
            devid = request.getParameter("devid");
        }
        pressFlowModelModel.setDevid(Integer.parseInt(devid));

        List<PressureFlowModel> newPress = pressureFlowServiceImpl.selectNewFById(pressFlowModelModel);

        for (PressureFlowModel d : newPress
        ) {
            Date dt = d.getDcollectdt();
            d.setDcollectdt_re(DateUtil.dateToString(dt));
        }
        return JSON.toJSONString(newPress);
    }







    @GetMapping("/newstatus")
    public String getStatus(Dev dev, HttpServletRequest request) {
        String devid = "3";
        if (request.getParameter("devid") != null && !"".equals(request.getParameter("devid"))) {
            devid = request.getParameter("devid");
        }
        dev.setId(Integer.parseInt(devid));

        Dev newDev = devServiceImpl.selectDevById(dev);


        return JSON.toJSONString(newDev);
    }

        /**
         * 查询一天的水压水流
         *
         * @param pressureFlowModel
         * @return
         */
        @GetMapping("/daypressflow")
        public String getDayPress(PressureFlowModel pressureFlowModel, HttpServletRequest request) {
            String devid = "3";
            if (request.getParameter("devid") != null && !"".equals(request.getParameter("devid"))) {
                devid = request.getParameter("devid");
            }
            String startdate = "", enddate = "";
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat dfhour = new SimpleDateFormat("HH:mm");
            Date date = new Date();
            startdate = DateUtil.dateToString(date, "yyyy-MM-dd") + " 00:00:00";
            enddate = DateUtil.dateToString(date, "yyyy-MM-dd") + " 23:59:59";
            if (request.getParameter("startdate") != null && !"".equals(request.getParameter("startdate"))) {
                startdate = request.getParameter("startdate");
                startdate += " 00:00:00";
            }
            if (request.getParameter("enddate") != null && !"".equals(request.getParameter("enddate"))) {
                enddate = request.getParameter("enddate");
                enddate += " 23:59:59";
            }
            double[] fPArr = new double[24];
            String[] arrhours = new String[24];// {"","","","","","","","","","","","","","","","","","","","","","","",""};
            for (int i = 0; i < 24; i++) {
                if (i < 10) {
                    arrhours[i] = "0" + String.valueOf(i) + ":00";
                } else {
                    arrhours[i] = String.valueOf(i) + ":00";
                }
            }
            int pos = 0;
            pressureFlowModel.setDevid(Integer.parseInt(devid));
            pressureFlowModel.setDcollectstart(startdate);
            pressureFlowModel.setDcollectend(enddate);

            List<PressureFlowModel> newDust = pressureFlowServiceImpl.selectInfoByHour(pressureFlowModel);
            ResultData resultData = new ResultData();
            for (PressureFlowModel item : newDust) {
                Date dt = item.getDcollectdt();
                arrhours[pos] = dfhour.format(dt);
                if (item.getTfan() != null && pos < 24) {
                    fPArr[pos] = item.getTfan();
                }
                if (item.getTflow() != null && pos < 24) {
                    fPArr[pos] = item.getTflow();
                }
                if (item.getTpressure()!= null && pos < 24) {
                    fPArr[pos] = item.getTpressure();
                }
                pos++;
            }
            resultData.setArrddata1(fPArr);
            resultData.setArrsdata1(arrhours);

            return JSON.toJSONString(resultData);
        }



    }




